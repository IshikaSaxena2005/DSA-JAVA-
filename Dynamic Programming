CheckList:
Memoization and Tabulation
1D DP Problems
2D DP Problems
Knapsack and Unbounded Knapsack Problems
DP on Strings
MCM Problems and DP on Trees

--For time complexity of a recursive code: Count the number of calls
TC: 
O(logn)>O(n)>O(nlogn)>O(n^2)>O(n^2logn)>O(n^3)>O(2^n)
good <--------------------------------------------bad

Using DP for Fibonacci: Recursion Plus memoization => Top Down DP
fibo(6)
-using array:size 7
              DP calls only once
              The ans of each call is stored in the array
              for each call it search for its answer in the array
              Total calls 2n-1
              SC:O(n) //due to call stack
              TC: O(n)

-FIBONACCI:
fibo function
if(dp[n]!=0) return dp[n]    
dp[n]=fibo(n-1)+fibo(n-2)
return dp[n]

DP:Using previous results to compute the new result
TABULATION-> Bottom Up DP or iterative DP

FRIENDS PAIRING PROBLEM
you are given a number 'n', Denoting that there are n friends. Find out the number of ways in 
which a person can either pair up or stay single.
// not necessary ki sab pair up hii ho
//give the number of ways
//either pair up or not
a(b,c,d)  ab(c,d)   ac(d,b)
either alone or together
pair(n-1)+(n-1)* pair(n-2)
class Solution
{
 public int pair(int n,int[]dp)
{
if(n<=2) return n; //for 2 either they can be together or not hence return statement
if(dp[n]!=-1) retur dp[n];
return dp[n]= pair(n-1) + (n-1)* pair(n-2); //combination
                //single    //pair

}
  public int PairFriend(int n)
{
    int dp[]= new int[n+1];
    Arrays.fill(dp[n],-1);
    return pair(n,dp);
}
}

//Tabulation:
public int PairFreind(int n)
{
int dp[]=new int[n+1];
if(n>0) dp[1]=1;
if(n>1) dp[2]=2;
for(int i=3;i<n;i++)
{
  dp[i]=dp[i-1]+ (i-1)* dp[i-2];
}
return dp[n];
}


COUNT DEARRANGEMENTS:
there are n postcards:
the postman delivers wrong postcards to very house and every house has incorrect postcard
public int dearrange(int n)
{
  if(n==0) return 0;
  if(n==1) return 1;
    return (n-1) * (dearrange(n-1)+ dearrange(n-2);
}

//using dp:
public int dearrange(int n)
{
int dp= new int[n+1];
    dp[0]=0;
  dp[1]=0;
dp[2]=1;

for(int i=3;i<n;i++)
{
    dp[i]=(i-1) * (dp[i-1]+dp[i-2]);
}
return dp[n];
}

//UNIQUE PATHS:(LEETCODE 62)
//you can go right or down
//helper func:
-passing variables 0,0 , m,n(m*n grid),2d dp
if rows>=m or col>=n return 0
if row==m-1 and col==n-1 yes reached the correct pos
if dp[row][col]!=-1 retrun dp[row][col]
calculate rightways= helper(row,col+1,m,n,dp)
calculate downways=helper(m+1,n,m,n,dp) 
return rightways+downways

main func: fill the dp with -1 and then retrun helper(0,0,m,n,dp)





Questions Solved:
Leetcode 509
Leetcode 746
Leetcode 198
Leetcode 70
Leetcode 62
Leetcode 64
Leetcode 1277
