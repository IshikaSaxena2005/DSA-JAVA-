CheckList:
Memoization and Tabulation
1D DP Problems
2D DP Problems
Knapsack and Unbounded Knapsack Problems
DP on Strings
MCM Problems and DP on Trees


--For time complexity of a recursive code: Count the number of calls
TC: 
O(logn)>O(n)>O(nlogn)>O(n^2)>O(n^2logn)>O(n^3)>O(2^n)
good <--------------------------------------------bad

Using DP for Fibonacci: Recursion Plus memoization => Top Down DP
fibo(6)
-using array:size 7
              DP calls only once
              The ans of each call is stored in the array
              for each call it search for its answer in the array
              Total calls 2n-1
              SC:O(n) //due to call stack
              TC: O(n)

-FIBONACCI:
fibo function
if(dp[n]!=0) return dp[n]    
dp[n]=fibo(n-1)+fibo(n-2)
return dp[n]

DP:Using previous results to compute the new result
TABULATION-> Bottom Up DP or iterative DP

FRIENDS PAIRING PROBLEM
you are given a number 'n', Denoting that there are n friends. Find out the number of ways in 
which a person can either pair up or stay single.
// not necessary ki sab pair up hii ho
//give the number of ways
//either pair up or not
a(b,c,d)  ab(c,d)   ac(d,b)
either alone or together
pair(n-1)+(n-1)* pair(n-2)
class Solution
{
 public int pair(int n,int[]dp)
{
if(n<=2) return n; //for 2 either they can be together or not hence return statement
if(dp[n]!=-1) retur dp[n];
return dp[n]= pair(n-1) + (n-1)* pair(n-2); //combination
                //single    //pair

}
  public int PairFriend(int n)
{
    int dp[]= new int[n+1];
    Arrays.fill(dp[n],-1);
    return pair(n,dp);
}
}

//Tabulation:
public int PairFreind(int n)
{
int dp[]=new int[n+1];
if(n>0) dp[1]=1;
if(n>1) dp[2]=2;
for(int i=3;i<n;i++)
{
  dp[i]=dp[i-1]+ (i-1)* dp[i-2];
}
return dp[n];
}


COUNT DEARRANGEMENTS:
there are n postcards:
the postman delivers wrong postcards to very house and every house has incorrect postcard
public int dearrange(int n)
{
  if(n==0) return 0;
  if(n==1) return 1;
    return (n-1) * (dearrange(n-1)+ dearrange(n-2);
}

//using dp:
public int dearrange(int n)
{
int dp= new int[n+1];
    dp[0]=0;
  dp[1]=0;
dp[2]=1;

for(int i=3;i<n;i++)
{
    dp[i]=(i-1) * (dp[i-1]+dp[i-2]);
}
return dp[n];
}

//UNIQUE PATHS:(LEETCODE 62)
//you can go right or down
//helper func:
-passing variables 0,0 , m,n(m*n grid),2d dp
if rows>=m or col>=n return 0
if row==m-1 and col==n-1 yes reached the correct pos
if dp[row][col]!=-1 retrun dp[row][col]
calculate rightways= helper(row,col+1,m,n,dp)
calculate downways=helper(m+1,n,m,n,dp) 
return rightways+downways

main func: fill the dp with -1 and then retrun helper(0,0,m,n,dp)
->Leetcode 279 
numSquare(n)= numSquares(1)+ numsSyqaes(n-1) out of these minimum

PATH WHICH PASSES THROUGH CERTIAN CHECKPOINTS:
No of paths=a*b*c 
where a,b,c are caculated
by dividing the path into differenct subgroupd such that each checkpoint 
is considered as a separate destination for each path ie a,b,c

FIBONACCI USING TABULATION(space optimisation):
array dp of 0,1,2 indexing
dp[2]=dp[0]+dp[1]
dp[0]=dp[1]
dp[1]=dp[2]-- loop till n-1 
TC:O(n) SC:O(1)

public int fib(int n)
{
  if(n<=1) return n;
int[]dp= new int[3];
dp[0]=0,dp[1]=1;
for(int i=2;i<=n;i++)
{
dp[2]=dp[1]+dp[0];
dp[0]=dp[1];
dp[1]=dp[2];
}
return dp[2];
}

------------------------
    0/1 KNAPSACK
------------------------
-maximize profit
recursive soln: Try out all possible combinations
class knapsack
{
public static in profit(int i,int[]wt,int[]val,int c)
{
if(i==wt.length) return 0;
int skip=profit(i+1,wt,val,c);
if(wt[i]>c) return skip;//if the current wt is greater than capacity I only need to skip

int take=val[i]+profit(i+1,wt,val,c-wt[i]);

return Math.max(take,skip);
}
public static void main(String[]args)
{
int[]val={5,3,9,16};
int[]wt={1,2,8,10};
int c=8;
System.out.print(profit(0,wt,val,c);
}
}  //TC:O(2^n)
SC:O(n*C)

//USING DP APPROACH:
class knapsack
{
public static in profit(int i,int[]wt,int[]val,int c,int[][]dp)
{
if(i==wt.length) return 0;
if(dp[i][c]!=-1) return dp[i][c];
int skip=profit(i+1,wt,val,c,dp);
if(wt[i]>c) return dp[i][c]=skip;//if the current wt is greater than capacity I only need to skip

int take=val[i]+profit(i+1,wt,val,c-wt[i],dp);

return dp[i][c]= Math.max(take,skip);
}
public static void main(String[]args)
{
int[]val={5,3,9,16};
int[]wt={1,2,8,10};
int c=8;
int n=wt.length;
int[][]dp= new int[n][c+1];
for(int i=0;i<dp.length;i++)
{
for(int j=0;j<dp[0].length;j++)
{
dp[i][j]=-1;
}
}
System.out.print(profit(0,wt,val,c,dp);
}
} TC:O(n*c)
SC:O(n*c)

SUBSET SUM:
//using recursion
tell if there exist a subset of the array with sum==target
-pick or not pick
class Solution
{
public static void main(String[]args)
{
  int arr={8,10,2,5};
  int target=8;
  int n=arr.length;
  if(n==0) return 0;
  return subset(0,arr,target);
}
public boolean subset(int i,int[]arr,int target)
{
    if(i==arr.length)
    {
      if(target==0) return true;
      else return false;
    }
    boolean ans=false;
    boolean skip=subset(i+1,arr,target);
    if(target-arr[i]<0) return skip; //negative hogya
    else
    {
    boolean take=subset(i+1,arr,target-arr[i]);
      ans=take || skip;
    }
return ans;    
}
}

//using dp
class Solution
{
public static void main(String[]args)
{
  int arr={8,10,2,5};
  int target=8;
  int n=arr.length;
  int[][]dp= new int[n][target+1];
  for(int i=0;i<dp.length;i++)
{
  for(int j=0;j<dp[0].length;j++)
{ 
  dp[i][j]=-1;
  }
}
  if(n==0) return 0;
  return subset(0,arr,target,dp);
}
public boolean subset(int i,int[]arr,int target,int[][]dp)
{
    if(i==arr.length)
    {
      if(target==0) return true;
      else return false;
    }
  if(dp[i][target]!=-1) return (dp[i][target]==1);
    boolean ans=false;
    boolean skip=subset(i+1,arr,target,dp);
    if(target-arr[i]<0) return skip; //negative hogya
    else
    {
    boolean take=subset(i+1,arr,target-arr[i],dp);
      ans=take || skip;
    }
    if(ans) dp[i][target]==1;
else dp[i][target]=0;
return ans;    
}
}

TABULATION IN KNAPSACK PROBLEM:
1) Thinking of tabulation
2)Thinking of Recursion-> top to down -> bottom up

We will se how to solve knapsack using the 2nd appraoch
//we travel in the reverse direction
//i-> n-1 to 1
//base case will change if(n<0) return 0
//make formula
if(wt[i]>c) profit(i,c)= profit(i-1,c)
else
{
profit(i,c)=max(val[i]+profit(i-1,c-wt[i],profit(i-1,c))
 }                               //take      //skip

//formula:
dp[i][c]=max(val[i]+dp[i-1][c-wt[i]],dp[i-1][c]

class Solution
{
  public static void main(String[]args)
{
  int[]val={5,3,9,16};
  int[]wt={1,28,10};
  int c=8;
  int n=wt.length;
  int[][]dp= new int[n][c+1];
  for(int i=0;i<n;i++)
  {
    for(int j=0;j<c+1;j++)
    {
      int skip=(i>0)?dp[i-1][j]: 0;
        if(wt[i]>j) dp[i][c]=skip;
        else
          {
        int pick=val[i];
        pick+=((i>0)? + dp[i-1][c-wt[i]]:0);
        dp[i][c]=Math.max(pick,skip);
          }
    }
  }
    System.out.print(dp[n-1][c]);
}
}

SUBSET SUM USING TABULATION:
//peeche chalae
//PARTITION SUM QUESTION
class Solution
{
  public boolean canPartition(int[]nums)
  {
    int sum=0;
    int n=nums.length;
    for(int ele:nums) sum+=ele;
    if(sum%2!=0) return false;
    int target=sum/2;
    int[][]dp= new int[n][target+1];
    for(int i=0;i<dp.length;i++)
    {
      for(int j=0;j<dp[0].length;j++)
      {
        boolean ans=false;
        boolean skip=(i>0)?(dp[i-1][j]==1) :(j==0);
                            //false          //true
      if(j-arr[j]<0) ans=skip;
else
    {
        boolean pick=(i>0)?dp[i-1][j-arr[i]]==1): (j==0);
        ans =pick || skip;
    }
    dp[i][j]?(ans)?1:0;
      }
    }
    return (dp[n-1][target]==1);
  }
}

---------------------------
LONGEST COMMON SUBSEQUENCE
---------------------------
subsequence and subset is almost same but order matter in subsequence

UNBOUNDED KNAPSACK:
Har item ki unlimited qunatity hai
public static int profit(int i,int[]val,int c,int[][]dp)
{
if(i==wt.length) return 0;
if(dp[i][c]!=0) return dp[i][c];
int skip= profit(i+1,wt,val,c,dp);
if(wt[i]>c) return dp[i][c]=skip;
int pick=val[i]+profit(i,wt,val,c-wt[i],dp);
return dp[i][c]=Math/max(skip,pick);
}
public static void main(String[]args)
{
  int[]val={6,3,7,25};
  int[]wt={2,2,8,9};
  int n=wt.length;
  int[][]dp=int [n][c+1];
for(int i=0;i<dp.length;i++)
{
for(int j=0;j<dp[0].length;j++)
{
  dp[i][j]=-1;
}
}
System.out.print(profit(0,wt,val,c,dp));
}
Questions Solved:
Leetcode 509
Leetcode 746
Leetcode 198
Leetcode 70
Leetcode 62
Leetcode 64
Leetcode 1277
Leetcode 63
Leetcode 279
Leetcode 213
Leetcode 416
Leetcode 2915
Leetcode 494
Leetcode 2786
Leetcode 322
Leetcode 516
Leetcode 1312
Leetocode 583
Leetcode 72
