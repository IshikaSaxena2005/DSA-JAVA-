//print all elements present in given queue without using builtin SOP(q)
class Display
{
psvmsa
{
Queue<Integer> q= new LinkedList<>();
q.add(1);
q.add(2);
q.add(3);
Queue<Integer> q= new LinkedList<>();
while(q.size()>0)
{
SOP(q.peek()+"" );
helper.add(q.poll());
}
while(helper.size()>0)
{
q.add(helper.poll());
}
}
}

-----------------------------
ARRAY IMPLEMENTATION OF QUEUE
-----------------------------
-we try to add the first element at last index

       <<r  f
---------
---------
push: rear ko peeche
pop:front ko peechee 

class ArrayImp
{
public static class queueArray
{
  int f=-1;
int r=-1;
int size=0;
int[]arr=new int[100];
public void add(int val)
{
  if(r==arr.length-1)
    {
        SOP("Queue is full");
        return;
    }
  if(f=-1) 
{f=r=0;//when queue is empty
arr[0]=val;
}
  else
  {
    arr[r+1]=val;
    r++;
  }
}

public int remove()
{
    if(size==0)
    {
      SOP("Queue is empty");
      return -1;

    }
    int x=arr[f];
    f++;
    return x;

}
public int peek()
{
    if(size==0) SOP("Queue is empty");
  return arr[f];
}
public void display()
{
if(size==0) print("Queue is empty");
for(int i=f;i<=r;i++)
{
SOP(arr[i]);
}
}
}
psvmsa
{
 queueArray q= new queueArray();
display(q);
q.add(1);
q.add(2);
q.add(3);
SOP(q);
}
}

-----------------------------------
LINKED LIST IMPLEMENTATION OF QUEUE
-----------------------------------

public class LLImp
{
public static class Node
{
int val;
Node next;
Node(int val)
{
this.val=val;
}
}
public static class queueLL
{
    Node head= null;
    Node tail=null;
    int size=0;

  public void add(int val)
  {
Node temp=new Node(val);
  if(size==0)
{
  head=tail=temp;
}
else
{

  tail.next=temp;
  tail=temp;
}
size++;
  }

public int peek()
{
if(size==0) SOP("Queue is empty") return -1;
return head.val;
}
public int remove()
{
int x=head.val;
head=head.next;
size--;
return x;
}

public void display()
{
Node temp=head;
while(temp!=null)
{
SOP(temp.val);
temp=temp.next;
}
}
}


psvmsa
{
queueLL q = new queueLL();
q.add(1);
q.add(2);
q.add(3);
q.disply();
}
}

--------------------------------------
ARRAY IMPLEMENTATION OF CIRCULAR QUEUE
--------------------------------------
add()
if(size==0)  
{
f=r=0;
arr[0]=x;
}
else if (size==n)
{SOP("Queue is full");}
else if(r<n-1)
{
r++;
arr[r]=x;
}
else if(r==n-1)
{
r=0;
arr[0]=x;//vapas aagya
}


remove()
{
if(size==0) {SOP("Queu is empty"); return -1;}
else if(f==n-1)
{
int val=arr[f];
f=0;
return val;
}
else
{
int val=arr[f];
f++;
return val;
}
}



peek()
{
if(size==0) return -1;
return arr[r];
}

display()
{
if(f<=r)
{
for(int i=f;i<r;i++)
{
SOP(arr[i]);
}
else
{
 for(int i=f;i<n-1;i++)
{
SOP(arr[i]);
}
for(int i=0;i<r;i++)
{
SOP(arr[i]);
}
}
}
}
