Types of Trees:
   Generic Tree: any node in this tree can have any number of child nodes
   Binary Tree: any node can have 0,1,2 children
   Binary Search Tree: the left child nodes are smaller than root node, the right child node are bigger than root node
   AVL Tree: BST which are self balanced
   

Creation of Tree:
  class Node
{
 int val;
 Node left;
 Node right;
 Node(int val)
{
this.val=val;
}
}
public class basic
{
 Node a= new Node(1);
 Node b= new Node(2);
 Node c= new Node(3);
 a.left=b;
 a.right=c;
}

Display BST:
 private static display(Node root)
 {
 if(root==null) return;
System.out.print(root.val);
display(root.left);
display(root.right);
}

Find Sum of roots:
 private static int sum(Node root)
 {
 if(root==null) return 0;
 return root.val+sum(root.left)+ sum(root.right);
 }

Find product of TreeNode:
private static int product(Node root)
{
if(root==null) return; //Base case: if the node is null, return 1 
if(root.val==0) return 0;
return root.val* product(root.left)* product(root.right);
}

Find product of non zero elements of node
private static int product(Node root)
{
if(root==null) return 1;
if(root.val!=0)
{
 return root.val *product(root.left)*product(root.right);
}
else
{
return product(root.left)*product(root.right);
}
}

Find the node with maximum value:
//max can be either root node,root.left,rot.right
private staic max(Node root)
{
if(root==null) return Integer.MIN_VALUE;
int a=root.val;
int b= max(root.left);
int c= max(root.right);
return Math.max(a,Math.max(b,c));
}

Find the node with minimum value:
private static int min(Node root)
{
if(root==null) return Integer.MAX_VALUE;
int a=root.val;
int b=min(root.right);
int c=min(root.left);
return Math.min(a,Math.min(b,c));
}

Find the size of Binary Tree:
//no. of nodes
private int size(Node root)
{
if(root==null) return;
return 1 +size(root.left)+size(root.right);
}

SIZE:No of nodes
No. of edges:size-1
LEVEL: generations in family
HEIGHT: level-1

Find levels of Binary Tree
private static int levels(Node root)
{
if(root==null) return 0;
//becaz there is a possiblity that the tree might have only one child node
return 1+ Math.max(levels(root.left),levels(root.right));
}

TRAVERSALS:
1) BFS TRAVERSALS
Preoder:Root Left Right
Leetcode 144
private static void preorder(Noderoot)
{
if(root==null)return;
System.out.print(root.val+"");
preorder(root.left);
preorder(root.right);
}

Inorder:Left Root Right
Leetcode 94
private static void inorder(Node root)
{
if(root==null) return;
inorder(root.left);
System.out.print(root.val+"");
inorder(root.right);
}

Postorder: Left Right Root
Leetocode 145
private static void postorder(Node root)
{
if(root==null) return;
postorder(root.left);
postorder(root.right);
System.out.print(root.val+"");
}

reverse preorder root right left
reverse inorder right root left
reverse postorder right left root

2nd method of Traversal: pre in post(2 calls and printing)

1)Invert a Binary Tree=>Leetcode 226
swapping and recursive call

2)Same Tree=>Leetcode 100
both nodes are null
any one of them is null
the values are not equal
recursively call left and right nodes

3)Diameter of Binary Tree =>Leetcode 543
diameter= levels(LST)+levels(RST) //if it passes through the root
//if not neccesarily passing throught the root then:
recursively check for each node and return the maximum diameter among the left, right and the root diameter.

4)Lowest common Ancestor
check where is p and qq is lying
case1:  root==null: return null
case2:  root==p || root==q return root
recursivelt check for left and right
if(left!=null && right!=null) return root
return (left!=null)?left:right

Types of Binary Tree:
   Full Binary Tree: 0 or 2 children
   Perfect Binary Tree: exactly 2 children
   Complete Binary Tree:Kind of Perfect BT but its last level can be incomplete
   Balanced Binary Tree: the difference between level(LST) and levels(RST) is less than equal to 1
   Degerenrate Tree: 0 or 1 child

BFS Levele Order Traversal:
(Using Queue)
-First in first out
pop<-<-<-<-<-<-<-push
(front)          (rear)
(deletion)        (insertion)

public class Traversals{
private static void levelOrder(Node root)
{
Queue<Node> q = new LinkedList<>();
if(root!=null) q.add(root);
while(q.size()>0)
{
Node front = q.remove();
System.out.println(root.val);
if(front.left!=null)q.add(root.left);
if(front.right!=null)q.add(root.right);
}
}
public static void main(String[] args)
{
Node a = new Node(1);
Node b = new Node(2);
Node c = new Node(3);
Node d = new Node(4);
Node e = new Node(5);
Node f = new Node(6);
Node g = new Node(7);
Node h = new Node(8);
Node i = new Node(9);
a.left=b; a.right=c;
b.left=d; b.right=e;
d.left=f; d.right=g;
f.left=h; f.right=i;
System.out.println("Level Order Treversals:);
levelOrder(root);
}}

//function for right to left traversal
private static levelOrderRtoL(Node  root)
{
Queue<Node> q = new LinkedList<>();
if(root!=null) q.add(root);
while(q.size>0)
{
int front = q.remove();
System.out.printl(root.val);
if(front.right!=null) q.add(front.right);
if(front.left!=null) q.add(front.left);
}

5)Print levels of nth level:
preoder(root,level) => whenever we go left or right level+1 =>if levels becomes equal to a given level print the eleents
static int n;
private static preorder(Node root, int level)
{
if(root==null) return;
if(level==n)System.out.print(root.val);
preorder(root.left,level+1);
preorder(root.right,level+1)
}

Level Order Traversal(Using OOPS CONCEPTS):
public class Traversals
{
public static class Pair{
Node node;
int level;
Pair(Node node, int level)
{
this.node = node;
this.level=level;
}}
private static void levelOrder(Node root)
{
Queue<Pair> q = new LinkedList<>();
Pair p = new Pair(root,0);
if(root!=null) q.add(p);
while(q.size()>0)
{
Pair front=q.remove();
Node temp=front.node;
System.out.print(temp.val+"");
if(temp.left!=null) q.add(front.left);
if(temp.right!=null) q.add(front.right);
}}

<Important for Interview>
Traversals using Iterative method
1)Preorder(Root left right)
-add root ele in the call stack
-if left and right children exist then pop the root ele and add its right and left children in the stack resp
-becaz of LIFO
-repeat this process
-stack is of TreeNode
public class Solution
{
private List<Integer> preorder(Node root)
{
Stack<TreeNode> st= new Stack<>();
if(root!=null)st.push(root);
List<Integer> ans = new ArrayList<>();
while(st.size()>0)
{
TreeNode top=st.pop();
ans.add(top.val);
   if(top.right!=null)
   {
      st.push(top.right);}
   if(top.left!=null)
   {
    st.push(top.left);
   }
}
return ans;
}}
TC:O(n) n is the nodes of the tree
SC:O(h)/O(n) h is the level of the tree

2)postOrder
public class Solution
{
private List<Integer> postorder(TreeNode root)
{
Stack <TreeNode> st = new Stack<>();
if(root==null) return ans;
st.push(root);
List<Integer> ans= new ArrayList<>();
while(st.size()>0)
{
TreeNode top=st.pop();
ans.add(top.val);
if(top.left!=null) {st.push(top.left);}
if(top.right!=null){st.push(top.right);}
}
return ans;
}}

//method 2 is post order is reverse of reverse preorder.
//reverse preorder:Root right left
public class Solution
{
private List<Integer> preorder(Node root)
{
Stack<TreeNode> st= new Stack<>();
if(root!=null)st.push(root);
List<Integer> ans = new ArrayList<>();
while(st.size()>0)
{
TreeNode top=st.pop();
ans.add(top.val);
if(top.left!=null)
   {
    st.push(top.left);
   }
   if(top.right!=null)
   {
      st.push(top.right);}
   
}
Collections.reverse(ans);
return ans;
}}

3)Inorder 
-stack and a variable(node)
-loop:
-variable temp =root
-2 cases temp can be null or it cannot be null
-if temp!=null -> st.push(temp) -> temp=temp.left
else temp==null -> check if stack is not empty-> print the ele on the top of the stack ->Node top=st.pop() print is
->temp=top.right 

public List<Integer> inorder(TreeNode root)
{
List<Integer> ans = new ArrayList<>();
Stack<TreeNode> st = new Stack<>();
TreeNode temp=root;
while(true)
{
if(temp!=null)
{
st.push(temp);
temp=temp.left;
}
else
{
if(st.size==0) break;
TreeNode top=st.pop();
ans.add(top.val);
temp=top.right;
}
}
return ans;
}
TC:O(n)
SC: O(n)
Auxillary space: maximum space of stack
best case:  AS: O(logn) 
worst case: AS: O(n)




