import java.util.Stack;
class Stack
{
public static void main(String []args)
{
  Stack<Integer> st= new Stack<>();
  st.push(10);
  st.push(20);
  st.push(30);
  SOP(st.peek()); //30   
  SOP(st); //will print the stack
  for(int ele:st)
  {
    SOP(ele);
  }
  st.pop(); //remove the top most ele
  SOP(st.size()); //the size of the stack
}
}
STACK WORKS ON FIFO and FILO
//STACK SIZE CHANGES WHEN ELEMENTS ARE ADDED OR DELETED
SOP(st.isEmpty()); //return either true or false

//ADVANTAGES:                              DIADAVANTAGE:
-unlimited size                            -no index accesing


//COPY STACK:
Stack<Integer> st= new Stack<>();
int n;
SOP("Enter the number the ele:");
Scanner sc = new Scanner(System.in);
n=sc.nextInt();
SOP("Enter the ele:");
for(int i=1;i<=n;i++)
{
  int x=sc.nextInt();
  st.push(x);
}
SOP(st);
//here st2 is for printing the elements in reverse order
Stack<Integer> st2= new Stack<>();
while(st.size()!=0)
{
  int x=st.peek();
  st2.push(x);
  st.pop();
//also can merge the above 2  operations: st2.push(st.pop());
//push the ele as well as remove it from the stack
}
SOP(s2);

//for prininting the same order of the original stack
Stack<Integer> st3= new Stack<>();
while(st2.size()!=0)
{
  int y=st2.peek();
  st3.push(x);
  st2.pop();
} //O(n)

//INSERT AT THE BOTTOM:
//using one more stack
//suppose the ele to be added in the new stack is x
Stack<Integer> stt= new Stack<>();
while(st.size()>0)
{
  stt.push(st.pop());
}
st.push(x);
while(stt.size()!=0)
{
  st.push(stt.pop());
}

//INSERTION AT AN INDEX:
int idx=2;
int x=7;
Stack<Integer> rt=new Stack<>();
while(st.size()>idx)
{
 rt.push(st.pop());
}
st.push(x);
while(rt.size()>0)
{
 st.push(rt.pop());
}
SOP(st);


DISPLAY STACK:
SOP(st); //builtin func
//make a new stack
Stack<Integer> rt= new Stack<>();
while(st.size()>0)
{
rt.push(st.pop());
}
while(rt.size()!=0)
{
  int x=rt.pop();
  SOP(x+"");
  st.push(x); 
}

//DISPLAY STACK RECURSIVELY:
public static void displayRecur(Stack<Integer> st)
{
  if(st.size()==0) return;
  int top=st.pop();
  SOP(top);
  displayRecur(st);
  st.push(top);
}

--------------------------------
STACK IMPLEMENTAION USING ARRAY
--------------------------------

public class implementation
{
public static class Stack_Array{
int[]arr=new int[5];
private int idx=0;
void push(int x)
{
  arr[idx]=x;
  idx++;
}
int peek(){
if (idx==0) 
{
System.out.print("Stack is empty");
return -1;
}
return arr[idx-1];
}
int pop()
 int top=arr[idx-1];
arr[idx-1]=0;
idx--;
return top;

}
void display()
{
for(int i=0;i<=idx-1;i++)
{
SOP(arr[i]);
}
}
int size()
{
return idx;
}
boolean isEmpty()
{
if(idx==0) return true;
else return false;
}
boolean isFull()
{
if(idx==arr.length) return true;
else return false;
}
}
public static void main(String[]args)
{
Stack_Array st= new Stack_Array();
st.push(10);
st.push(20);
st.size();
st.pop();
st.display();  
}

--------------------------
LINKED LIST IMPLEMENTAION
--------------------------
public class LL_Imp
{
public static Node{
int val;
Node next;
Node(int val)
{this.val=val;}
}
public static class LLStack
{
Node head=null;
int size=0;
void push(int val)
{
Node temp=new Node(x);
temp.next=head;
head=temp;
size++;
}
void display_Rev()
{
Node temp=head;
while(temp!=null)
{SOP(temp.val);
temp=temp.next;}
}
void displayrecur(Node h)
{
if(h==null) return;
  displayrecur(h.next);
  SOP(h.val);
}
void display()
{
  displayrecur(head);
}

int size()
{return size;}
int pop()
{
if(head==null) 
{
SOP("Stack is empty")'
return -1;

}
int x=head.val;
head=head.next;
return x;
}

int peek()
{
if(head==null)
{
SOP("Stack is empty");
return -1;
}
return head.val;
}

boolean isEMpty()
{
if(size()==0) return true;
else false;
} 

}
psvmsa
{
LLStack st= new LLStack();
st.push(10);
st,display();
}
}

-----------------
INFIX EVALUTAION
-----------------
import java.util.*;

public class InfixEvaluation {
    public static void main(String[] args) {
        String str = "9-5*(2*4)";
        System.out.println("Result: " + evaluateInfix(str));
    }

    public static int evaluateInfix(String str) {
        Stack<Integer> val = new Stack<>();
        Stack<Character> op = new Stack<>();

        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);

            if (Character.isDigit(ch)) {
                val.push(ch - '0');
            } else if (ch == '(') {
                op.push(ch);
            } else if (ch == ')') {
                while (op.peek() != '(') {
                    performOperation(val, op);
                }
                op.pop(); // Remove '('
            } else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
                while (!op.isEmpty() && precedence(op.peek()) >= precedence(ch)) {
                    performOperation(val, op);
                }
                op.push(ch);
            }
        }

        while (!op.isEmpty()) {
            performOperation(val, op);
        }

        return val.pop();
    }

    public static void performOperation(Stack<Integer> val, Stack<Character> op) {
        int v2 = val.pop();
        int v1 = val.pop();
        char operator = op.pop();

        switch (operator) {
            case '+':
                val.push(v1 + v2);
                break;
            case '-':
                val.push(v1 - v2);
                break;
            case '*':
                val.push(v1 * v2);
                break;
            case '/':
                val.push(v1 / v2);
                break;
        }
    }

    public static int precedence(char ch) {
        if (ch == '+' || ch == '-') return 1;
        if (ch == '*' || ch == '/') return 2;
        return 0;
    }
} 

----------------
INFIX TO POSTFIX
----------------
import java.util.Stack;

public class InfixToPostfix {

    static int precedence(char ch) {
        switch (ch) {
            case '+':
            case '-': return 1;
            case '*':
            case '/': return 2;
            case '^': return 3;
        }
        return -1;
    }

    static String infixToPostfix(String expression) {
        StringBuilder result = new StringBuilder();
        Stack<Character> stack = new Stack<>();

        for (char ch : expression.toCharArray()) {
            if (Character.isLetterOrDigit(ch)) {
                result.append(ch); // Operand
            } else if (ch == '(') {
                stack.push(ch); // Left parenthesis
            } else if (ch == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    result.append(stack.pop());
                }
                stack.pop(); // Remove '('
            } else {
                while (!stack.isEmpty() && precedence(stack.peek()) >= precedence(ch)) {
                    result.append(stack.pop());
                }
                stack.push(ch); // Operator
            }
        }
        while (!stack.isEmpty()) {
            result.append(stack.pop());
        }
        return result.toString();
    }

    public static void main(String[] args) {
        String expr = "A+B*(C^D-E)";
        System.out.println("Postfix: " + infixToPostfix(expr));
    }
}

----------------
PREFIX TO INFIX
----------------
import java.util.Stack;

public class PrefixToInfix {

    static String prefixToInfix(String expression) {
        Stack<String> stack = new Stack<>();

        for (int i = expression.length() - 1; i >= 0; i--) {
            char ch = expression.charAt(i);

            if (Character.isLetterOrDigit(ch)) {
                stack.push(String.valueOf(ch)); // Operand
            } else {
                String op1 = stack.pop();
                String op2 = stack.pop();
                stack.push("(" + op1 + ch + op2 + ")");
            }
        }
        return stack.peek();
    }

    public static void main(String[] args) {
        String expr = "*+AB-CD";
        System.out.println("Infix: " + prefixToInfix(expr));
    }
}

------------------
PREFIX TO POSTFIX
------------------
import java.util.Stack;

public class PrefixToPostfix {

    static String prefixToPostfix(String expression) {
        Stack<String> stack = new Stack<>();

        for (int i = expression.length() - 1; i >= 0; i--) {
            char ch = expression.charAt(i);

            if (Character.isLetterOrDigit(ch)) {
                stack.push(String.valueOf(ch)); // Operand
            } else {
                String op1 = stack.pop();
                String op2 = stack.pop();
                stack.push(op1 + op2 + ch);
            }
        }
        return stack.peek();
    }

    public static void main(String[] args) {
        String expr = "*+AB-CD";
        System.out.println("Postfix: " + prefixToPostfix(expr));
    }
}

-----------------
POSTFIX TO PREFIX
-----------------
import java.util.Stack;

public class PostfixToPrefix {

    static String postfixToPrefix(String expression) {
        Stack<String> stack = new Stack<>();

        for (char ch : expression.toCharArray()) {
            if (Character.isLetterOrDigit(ch)) {
                stack.push(String.valueOf(ch)); // Operand
            } else {
                String op2 = stack.pop();
                String op1 = stack.pop();
                stack.push(ch + op1 + op2);
            }
        }
        return stack.peek();
    }

    public static void main(String[] args) {
        String expr = "AB+CD-*";
        System.out.println("Prefix: " + postfixToPrefix(expr));
    }
}

-----------------
POSTFIX TO INFIX
-----------------
import java.util.Stack;

public class PostfixToInfix {

    static String postfixToInfix(String expression) {
        Stack<String> stack = new Stack<>();

        for (char ch : expression.toCharArray()) {
            if (Character.isLetterOrDigit(ch)) {
                stack.push(String.valueOf(ch)); // Operand
            } else {
                String op2 = stack.pop();
                String op1 = stack.pop();
                stack.push("(" + op1 + ch + op2 + ")");
            }
        }
        return stack.peek();
    }

    public static void main(String[] args) {
        String expr = "AB+CD-*";
        System.out.println("Infix: " + postfixToInfix(expr));
    }
}




---------------
INFIX TO PREFIX
---------------
import java.util.Stack;

public class InfixToPrefix {

    static int precedence(char ch) {
        switch (ch) {
            case '+':
            case '-': return 1;
            case '*':
            case '/': return 2;
            case '^': return 3;
        }
        return -1;
    }

    static String reverseExpression(String expression) {
        StringBuilder reversed = new StringBuilder();
        for (char ch : expression.toCharArray()) {
            if (ch == '(') {
                reversed.append(')');
            } else if (ch == ')') {
                reversed.append('(');
            } else {
                reversed.append(ch);
            }
        }
        return reversed.reverse().toString();
    }

    static String infixToPostfix(String expression) {
        Stack<Character> stack = new Stack<>();
        StringBuilder result = new StringBuilder();

        for (char ch : expression.toCharArray()) {
            if (Character.isLetterOrDigit(ch)) {
                result.append(ch); // Operand
            } else if (ch == '(') {
                stack.push(ch);
            } else if (ch == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    result.append(stack.pop());
                }
                stack.pop(); // Remove '('
            } else {
                while (!stack.isEmpty() && precedence(stack.peek()) >= precedence(ch)) {
                    result.append(stack.pop());
                }
                stack.push(ch);
            }
        }
        while (!stack.isEmpty()) {
            result.append(stack.pop());
        }
        return result.toString();
    }

    static String infixToPrefix(String expression) {
        String reversedExpr = reverseExpression(expression);
        String postfixExpr = infixToPostfix(reversedExpr);
        return new StringBuilder(postfixExpr).reverse().toString();
    }

    public static void main(String[] args) {
        String expr = "(A+B)*(C-D)";
        System.out.println("Prefix: " + infixToPrefix(expr));
    }
}




