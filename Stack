import java.util.Stack;
class Stack
{
public static void main(String []args)
{
  Stack<Integer> st= new Stack<>();
  st.push(10);
  st.push(20);
  st.push(30);
  SOP(st.peek()); //30   
  SOP(st); //will print the stack
  for(int ele:st)
  {
    SOP(ele);
  }
  st.pop(); //remove the top most ele
  SOP(st.size()); //the size of the stack
}
}
STACK WORKS ON FIFO and FILO
//STACK SIZE CHANGES WHEN ELEMENTS ARE ADDED OR DELETED
SOP(st.isEmpty()); //return either true or false

//ADVANTAGES:                              DIADAVANTAGE:
-unlimited size                            -no index accesing


//COPY STACK:
Stack<Integer> st= new Stack<>();
int n;
SOP("Enter the number the ele:");
Scanner sc = new Scanner(System.in);
n=sc.nextInt();
SOP("Enter the ele:");
for(int i=1;i<=n;i++)
{
  int x=sc.nextInt();
  st.push(x);
}
SOP(st);
//here st2 is for printing the elements in reverse order
Stack<Integer> st2= new Stack<>();
while(st.size()!=0)
{
  int x=st.peek();
  st2.push(x);
  st.pop();
//also can merge the above 2  operations: st2.push(st.pop());
//push the ele as well as remove it from the stack
}
SOP(s2);

//for prininting the same order of the original stack
Stack<Integer> st3= new Stack<>();
while(st2.size()!=0)
{
  int y=st2.peek();
  st3.push(x);
  st2.pop();
} //O(n)

//INSERT AT THE BOTTOM:
//using one more stack
//suppose the ele to be added in the new stack is x
Stack<Integer> stt= new Stack<>();
while(st.size()>0)
{
  stt.push(st.pop());
}
st.push(x);
while(stt.size()!=0)
{
  st.push(stt.pop());
}

//INSERTION AT AN INDEX:
int idx=2;
int x=7;
Stack<Integer> rt=new Stack<>();
while(st.size()>idx)
{
 rt.push(st.pop());
}
st.push(x);
while(rt.size()>0)
{
 st.push(rt.pop());
}
SOP(st);


DISPLAY STACK:
SOP(st); //builtin func
//make a new stack
Stack<Integer> rt= new Stack<>();
while(st.size()>0)
{
rt.push(st.pop());
}
while(rt.size()!=0)
{
  int x=rt.pop();
  SOP(x+"");
  st.push(x); 
}

//DISPLAY STACK RECURSIVELY:
public static void displayRecur(Stack<Integer> st)
{
  if(st.size()==0) return;
  int top=st.pop();
  SOP(top);
  displayRecur(st);
  st.push(top);
}









