BINARY SEARCH TREE
the root value should e greater than left sub tree and smaller than the right subtree-->WRONG MISCONCEPTION
this above statement is wrong
root.val>max(LST) && root.val<min(RST)->correct
Can a BST can contain duplicate elements? YES, in general a BST contains unique elements
but if it is given in the question then see the definition of BST in the ques and solve accordingly.
Find minimum and maximum of a BST

Advantages of BST:
Efficient Searching
Efficient insertion and deletion
Usage in implementation of other data structures like sets, maps, priority queues

Diadvantages:
Lack of support for range queries
Not that efficient in case of Unbalanced Trees

Applications:
Phonebook
Dictionary
Stock Market analysis

You have 3 nodes with different value how many unique BST can be formed?
only one possible way(since BST needs to follow a set of properties)

Search element in the BST:
-in BST we do not need to search the entire tree
-3 case:
root.val==target
root.val< target
root.val>target

Inorder Traversal in BST:
               10
             /     \ 
            7      14
           / \     / \
          3   8   11  12   
      inorder: 3 7 8 10 11 14 21 <sorted>
after inorder traversal of a BST we always get a sorted list

Consider a binary Tree with n nodes. What is the maximum possible height of the tree?
-> n
minimum possible height? -> logn

Consider a BST with n nodes. What is the worst case of time complexity inc ase of searchinf->log n

Validate BST: the inorder will always be in ascending order for the BST

Lowest common ancestor:
of BST:
-if root exist and p is in  the LST and q is in the right subtree and if p's value is less than root 
and q's value is greater than root then the LCA is root
-both the values of p and q are less than r ->move root to the left->recursively apply the above check
- if both val of p and q becomes greter than root-> move to right}


greater sum tree
-every val replced by the no.+ all elements greater than the no.
-hint:inorder
-List<TreeNode> arr={1,2,3,4,5,6,7}
-run loop in reverse order n-2 to 0 add the prev no and the no itself

BST to GST:
-root.val+=sum in the reverse inorder and sum becomes root.val
-reverse inorder right root left

Convert Sorted array to BST:
- we need to target the middle element and make it root
-then inorder chalao 
-LST pass thorgh recursion and apply the step1
-lo and hi variable
-find the mid and make a node TreeNode root=nee TreeNode(arr[mid])
-recursively attach LST and RST
-do the same
-LST-lo to mid-1
-RST-mid+1 to hi
-lo>hi ->return null
else attach left and right
--calculate mid as lo+(hi-lo)/2

converting ArrayList to array:
List<Integer> ans = new ArrayList<>();
int[]nums=new int[ans.size()];
for(int i=0;i<ans.size();i++)
{
nums[i]=ans.get(i);
}

construct BST from preorder
-there is only one BST possible from a preorder
-inorder of BST is always sorted
-make a copy of the preorder tree and sort it
-making copy: int[]iorder=Arrays.copyOf(preorder)
Arrays.sort(inorder);

INORDER PREDECESSOR for BST:
-the immmediate left and right are its predessor and succesor
pred=root.left
while(pred.right!=null)
{
 pred=pred.right;
}
 
INORDER SUCESSOR(go right then left)
succ=root.right;
while(succ.left!=null)
{
 succ=succ.left;
}

DELETION OF NODE IN BST
if(root.val==key) return null;
else if(root.val>key)
{
 root.left=delete(root.left,key)
}
else (root.val<key)
{
root.right=delete(root.right,key)
}




Balance a BST:
-we need to create a new Tree
-BST-> sorted array-> sorted array to BST
follow up: (next ques is to modify the tree and not create a new Tree)
List of Questions solved:
Leetcode 700
Leetcode 701
Leetcode 94
Leetcode 230
Leetcode 98
Leetcode 108
Leetcode 236
Leetcode 538
Leetcode 1038
Leetcode 108
Leetcode 1382
Leetcode 1008
Leetcode 450



